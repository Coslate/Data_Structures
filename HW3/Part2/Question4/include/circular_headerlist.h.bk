#ifndef _CIRCULAR_HEADERLIST_H_
#define _CIRCULAR_HEADERLIST_H_

#include <vector>
#include <string>
#include <cfloat>
#include <climits>
#include <math.h>
#include <unordered_map>
#include <algorithm>
#include <iostream>

template <typename CoefType, typename ExpType>
class CircularHeaderList; //forward declaration

template <typename CoefType, typename ExpType>
std::ostream & operator<<(std::ostream &os, const CircularHeaderList<CoefType, ExpType> &out_list);

template <typename CoefType, typename ExpType>
class CHLNode{
    private:
        CoefType      coef;
        ExpType       exp;
        CHLNode<CoefType, ExpType>* link;
    public:
        CHLNode(const CoefType &coef, const ExpType &exp, CHLNode<CoefType, ExpType>* const in_link=NULL) : coef(coef), exp(exp), link(in_link){}

        ~CHLNode(){}

        friend class CircularHeaderList<CoefType, ExpType>;
        friend std::ostream & operator<<<CoefType, ExpType>(std::ostream &os, const CircularHeaderList<CoefType, ExpType> &out_list);
};

template <typename CoefType, typename ExpType>
class CircularHeaderList{
    private:
        std::string name;
        CHLNode<CoefType, ExpType> *header;
        CHLNode<CoefType, ExpType> *av;

    public:
        CircularHeaderList(const std::string &name="NULL"):name(name), header(NULL), av(NULL){
            CoefType unknown_coef;
            ExpType  unknown_exp;
            header = new CHLNode<CoefType, ExpType> (unknown_coef, unknown_exp, NULL);
            header->link = header;
        }

        CircularHeaderList(const CoefType &in_coef, const ExpType &in_exp, const std::string &name="NULL"):name(name), header(NULL), av(NULL){
            header = new CHLNode<CoefType, ExpType> (in_coef, in_exp, NULL);
            header->link = header;
        }

        //Copy consturctor
        CircularHeaderList(const CircularHeaderList &p){
            name     = p.name;
            header   = p.header;
            av       = p.av;
        }

        //Destructor
        ~CircularHeaderList(){
            CHLNode<CoefType, ExpType> *current_node = header->link;
            //Find the last node
            while(current_node->link != header){
                current_node = current_node->link;
            }
            current_node->link = av;
            av = header->link;
            header->link = header;
        }

        bool                               IsEmpty             () const {return (header->link==header);}
        void                               InsertFront         (const CoefType &in_coef, const ExpType &in_exp);
        void                               InsertBack          (const CoefType &in_coef, const ExpType &in_exp);
        void                               DeleteFirst         ();
        void                               DeleteLast          ();
        int                                NumOfNodes          ();
        CHLNode<CoefType, ExpType>*        Get                 (const int i) const;

        CHLNode<CoefType, ExpType>*        GetNode             ();
        void                               RetNode             (CHLNode<CoefType, ExpType> *&x);
        void                               CleanAV             ();

        std::string                        Name                () const {return name;}
        void                               SetName             (const std::string &in_name)    {name     = in_name;}

        //static bool SortFunction(const Term<CoefType, ExpType> &a, const Term<CoefType, ExpType> &b);
        void operator=(const CircularHeaderList &chain);
        friend std::ostream & operator<<<CoefType, ExpType>(std::ostream &os, const CircularHeaderList<CoefType, ExpType> &out_chain);

};

#include <circular_headerlist.hpp>
#endif

